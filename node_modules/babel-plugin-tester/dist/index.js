"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "prettierFormatter", {
  enumerable: true,
  get: function () {
    return _prettier.default;
  }
});
Object.defineProperty(exports, "unstringSnapshotSerializer", {
  enumerable: true,
  get: function () {
    return _unstringSnapshotSerializer.default;
  }
});
exports.default = void 0;

var _pluginTester = _interopRequireDefault(require("./plugin-tester"));

var _prettier = _interopRequireDefault(require("./formatters/prettier"));

var _unstringSnapshotSerializer = _interopRequireDefault(require("./unstring-snapshot-serializer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// istanbul ignore else (it's not worth testing)
if (typeof expect !== 'undefined' && expect.addSnapshotSerializer) {
  expect.addSnapshotSerializer(_unstringSnapshotSerializer.default);
}

function defaultPluginTester(options) {
  return (0, _pluginTester.default)(_objectSpread({
    formatResult: _prettier.default
  }, options));
}

var _default = defaultPluginTester;
exports.default = _default;